{"version":3,"sources":["images/diana-foto.jpeg","Navbar.js","Brand.js","About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","_default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","reactstrap_es","color","light","expand","onClick","navbar","className","href","React","Component","brand","src","photo","width","alt","about","App","Navbar_default","Brand","About","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kRCWtC,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,OAASP,EAAKO,OAAOC,KAAZP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACdA,EAAKU,MAAQ,CACXC,QAAQ,GALOX,wEASjBG,KAAKS,SAAS,CACZD,QAASR,KAAKO,MAAMC,0CAItB,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjCN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeI,QAASjB,KAAKI,SAC7BM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUL,OAAQR,KAAKO,MAAMC,OAAQU,QAAM,GACzCR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKM,UAAU,UAAUD,QAAM,GAC7BR,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASM,UAAU,QAAQC,KAAK,gBAAhC,aAEFV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASM,UAAU,QAAOC,KAAK,KAA/B,aAEFV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASM,UAAU,QAAQC,KAAK,gBAAhC,eAEFV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASM,UAAU,QAAQC,KAAK,gBAAhC,uBA/BcC,IAAMC,4BCKrBC,EAXD,WACV,OACAb,EAAAC,EAAAC,cAAA,OAAKO,UAAU,sCACXT,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAAA,MAAIO,UAAU,kBAAd,mBAEAT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,QAAQK,IAAKC,IAAOC,MAAM,MAAMC,IAAK,qBCM7CC,EAbD,WACV,OAEAlB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,oBACfT,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAAA,KAAGO,UAAU,YAAb,YACAT,EAAAC,EAAAC,cAAA,qVCmBWiB,mLAnBX,OACEnB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,UAAQO,UAAU,cAChBT,EAAAC,EAAAC,cAACkB,EAAD,OAEFpB,EAAAC,EAAAC,cAAA,WAASO,UAAU,aACjBT,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGH,EAAAC,EAAAC,cAACmB,EAAD,QAGPrB,EAAAC,EAAAC,cAAA,WAASO,UAAU,wBACfT,EAAAC,EAAAC,cAACoB,EAAD,eAbQV,aCGEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.111ea97c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/diana-foto.d7b63364.jpeg\";","import React from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n } from 'reactstrap';\r\n\r\nexport default class  extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink className=\"links\" href=\"/components/\">About me</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink className=\"links\"href=\"#\">Projects</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink className=\"links\" href=\"/components/\">Work Tools</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink className=\"links\" href=\"/components/\">Contact</NavLink>\r\n              </NavItem>\r\n              {/* <UncontrolledDropdown nav inNavbar>\r\n                <DropdownToggle nav caret>\r\n                  Options\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                  <DropdownItem>\r\n                    Option 1\r\n                  </DropdownItem>\r\n                  <DropdownItem>\r\n                    Option 2\r\n                  </DropdownItem>\r\n                  <DropdownItem divider />\r\n                  <DropdownItem>\r\n                    Reset\r\n                  </DropdownItem>\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown> */}\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport photo from './images/diana-foto.jpeg'\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nconst brand = () => {\r\n    return ( \r\n    <div className=\"brand-container col-12-lg-md-sm-xl\">\r\n        <Col>    \r\n        <h1 className=\"Diana-carrillo\">Diana Carrillo</h1>\r\n        </Col>          \r\n        <img className=\"photo\" src={photo} width='250' alt =\"diana-carrillo\"/> \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default brand;","import React from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nconst about = () => {\r\n    return ( \r\n \r\n    <div className=\"about-container \">\r\n    <Container>\r\n    <p className=\"about-me\">About me</p>\r\n    <p>My journey as a front end developer has just started and I couldn't be more happy of where It has taken me. I studied psychology at UAM-X in Mexico City, so I'm always looking for healthy relationships on my working environment, creating strategies to solve problems and being analytic with my work so as with my companion's </p>\r\n    </Container>\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default about;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar'\nimport Brand from './Brand'\nimport About from './About'\nimport { Container, Row, Col } from 'reactstrap';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Navbar />\n        </header>\n        <section className=\"container\">\n          <Row>\n             <Brand />\n          </Row>\n      </section>\n      <section className=\" wine-color sections\">\n          <About />\n      \n      </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}